#pragma kernel GetPoints
#pragma kernel ResetCellularNoise
#pragma kernel ResetExistingLineMap
#pragma kernel CalcCellularNoise
#pragma kernel ModifyCellularNoise
#pragma kernel CalcDelaunayTriangulationLine

RWTexture2D<float4> ColorMap;
RWTexture2D<float4> PositionMap;
RWTexture2D<float4> BodyIndexMap;
RWTexture2D<float4> DepthMap;
RWTexture2D<float4> EdgeMap;

RWTexture2D<float4> CellularMap;
RWTexture2D<float4> SeedMap; //xy = seed point of cellular noise, z = index of 'wPoints' that indicates 
RWTexture2D<float4> ExistingLineMap;

StructuredBuffer<uint2> rPoints;

AppendStructuredBuffer<uint2> wPoints; //xy positions for delaunay triangulation
AppendStructuredBuffer<uint3> wTriangles; //lines of delaunay triangulation
int MaxPointNum;

inline float remap(float x, float in_min, float in_max,
                   float out_min, float out_max) {
    float t = (x - in_min) / (in_max - in_min);
    return lerp(out_min, out_max, t);
}

float nrand(float2 uv)
{
    return frac(sin(dot(uv, float2(12.9898, 78.233))) * 43758.5453);
}

float3 hsv(float h, float s, float v)
{
    float4 t = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    float3 p = abs(frac(float3(h,h,h) + t.xyz) * 6.0 - float3(t.w,t.w,t.w));
    return v * lerp(float3(t.x,t.x,t.x), clamp(p - float3(t.x,t.x,t.x), 0.0, 1.0), s);
}

[numthreads(32, 32, 1)]
void ResetCellularNoise(uint2 id : SV_DispatchThreadID)
{
    uint width, height;
    CellularMap.GetDimensions(width, height);
    if (0 <= id.x && id.x < width &&
        0 <= id.y && id.y < height)
    {
        CellularMap[id] = float4(0,0,0,1);
        SeedMap[id] = float4(0,0,0,1);
    }
}

[numthreads(32, 32, 1)]
void ResetExistingLineMap(uint2 id : SV_DispatchThreadID)
{
    uint width, height;
    ExistingLineMap.GetDimensions(width, height);
    if (0 <= id.x && id.x < width &&
        0 <= id.y && id.y < height)
    {
        ExistingLineMap[id] = float4(0,0,0,1);
    }
}

[numthreads(32, 32, 1)]
void GetPoints(uint2 id : SV_DispatchThreadID)
{
    uint width, height;
    BodyIndexMap.GetDimensions(width, height);

    if (id.x < 0 || width <= id.x || id.y < 0 || height <= id.y) { return; }

    //int isEdgePixel = EdgeMap[id].r > 0;
    int isBodyPixel = BodyIndexMap[id].r > 0.0;
    //float edgePointRatio = 0.6 * MaxPointNum / (width * height);
    float bodyPointRatio = 1.0 * MaxPointNum / (width * height);
    //bool isEdgePoint  = isBodyPixel && isEdgePixel && nrand(id.xy * float2(width,height)) < edgePointRatio;
    bool isBodyPoint = isBodyPixel && nrand(id.xy) < bodyPointRatio;

    //TODO(Tasuku): BodyIndexMapからエッジを取り出す

    //float4 color = float4(isBodyPoint, isBodyPoint, isBodyPoint, 1.0);
    //if (isEdgePoint) { CellularMap[id] = float4(1,1,1,1); }
    if (isBodyPoint) { wPoints.Append(id.xy); }
}

[numthreads(512, 1, 1)]
void CalcCellularNoise(uint id : SV_DispatchThreadID)
{
    float width, height;
    CellularMap.GetDimensions(width, height);

    if (id < 0 || MaxPointNum <= id) { return; } //FIX(Tasuku): MaxPointNumでなく実際カウントした数

    float maxPointNumFloat = MaxPointNum;
    if (0 <= rPoints[id].x && rPoints[id].x < width &&
        0 <= rPoints[id].y && rPoints[id].y < height)
    {
        float2 seedPoint = rPoints[id]; //母点

        //Calc cellular noise & bake seed point map
        float2 xy = float2(rPoints[id].x / float(width), rPoints[id].y / float(height));
        float4 color = float4(
            nrand(float2(xy.x,0)),
            nrand(float2(0, xy.y)),
            //nrand(float2(id/,0)), //TODO(Tsuku): 辺な円状のノイズが入る
            nrand(id / maxPointNumFloat),
            1.0
        );
        int MaxRadius = 50; // 300px, TODO(Tasuku): Fix this later. 
        for(int r = 0; r < MaxRadius; r++) {
            for(int angle = 0; angle < 360; angle++) {
                float theta = radians(angle);
                float x = r * sin(theta);
                float y = r * cos(theta);
                float2 vicinityXy = rPoints[id] + float2(x,y);
                if (0 <= vicinityXy.x && vicinityXy.x < width &&
                    0 <= vicinityXy.y && vicinityXy.y < height)
                {
                    if (CellularMap[vicinityXy].r <= 0 && BodyIndexMap[vicinityXy].r > 0) {
                        CellularMap[vicinityXy] = color;
                        SeedMap[vicinityXy] = float4(
                            seedPoint.x / width, seedPoint.y / height,
                            id / maxPointNumFloat, 1
                        );
                    }
                }
                
            }
        }

    }
}

[numthreads(32, 32, 1)]
void ModifyCellularNoise(uint2 id : SV_DispatchThreadID)
{
    int width, height;
    SeedMap.GetDimensions(width, height);

    if (id.x < 0 || width <= id.x || id.y < 0 || height <= id.y) { return; }
    float4 centerColor = CellularMap[id.xy];
    int2 centerSeedPoint = round(SeedMap[id.xy].xy * float2(width,height));

    for (int dy = -1; dy <= 1; dy++) {
        for (int dx = -1; dx <= 1; dx++) {
            int2 vicinityXy = id.xy + float2(dx, dy);

            if (0 <= vicinityXy.x && vicinityXy.x < width &&
                0 <= vicinityXy.y && vicinityXy.y < height)
            {
                float4 neighborColor = CellularMap[vicinityXy];
                if (distance(centerColor, neighborColor) != 0)
                {
                    int2 neighborSeedPoint = round(SeedMap[vicinityXy].xy * float2(width,height)); //0~1 to 0~w, 0~1 to 0~h
                    float dist1 = distance(centerSeedPoint, vicinityXy);
                    float dist2 = distance(neighborSeedPoint, vicinityXy);
                    CellularMap[vicinityXy] = dist1 < dist2 ? centerColor : neighborColor;
                    SeedMap[vicinityXy] = dist1 < dist2 ? SeedMap[id.xy] : SeedMap[vicinityXy];
                }
            }
        }
    }
}

/*
[numthreads(32, 32, 1)]
void CalcDelaunayTriangulationLine(uint2 id : SV_DispatchThreadID)
{
    float4 centerColor = CellularMap[id.xy];
    int centerSeedPointIndex = round(SeedMap[id.xy].z * MaxPointNum);

    //4近傍を見る
    for (int dy = 0; dy <= 1; dy++) {
        for (int dx = 0; dx <= 1; dx++) {
            int2 vicinityXy = id.xy + float2(dx, dy);
            float4 neighborColor = CellularMap[vicinityXy];

            //If different color
            if (distance(centerColor, neighborColor) != 0)
            {
                int neighborSeedPointIndex = round(SeedMap[vicinityXy].z * MaxPointNum); //0~1 to 0~w, 0~1 to 0~h
                int2 ei = int2(centerSeedPointIndex, neighborSeedPointIndex);
                if (ExistingLineMap[ei].r == 0) {
                    ExistingLineMap[ei] = float4(1,1,1,1);

                    //インデックス保存した方がいい？
                    float4 a = float4(SeedMap[id.xy].xy, SeedMap[vicinityXy].xy);
                    wLines.Append(a);
                }
            }
        }
    }
}
*/


#define TRIANGLE_POINTS_NUM 3

bool isIncludedIn(int arr[TRIANGLE_POINTS_NUM], int value)
{
    bool included = false;
    for (int i = 0; i < TRIANGLE_POINTS_NUM; i++) {
        if (arr[i] == value) { included = true; }
    }
    return included;
}

[numthreads(32, 32, 1)]
void CalcDelaunayTriangulationLine(uint2 id : SV_DispatchThreadID)
{
    int width, height;
    BodyIndexMap.GetDimensions(width, height);
    if (id.x < 0 || width <= id.x || id.y < 0 || height <= id.y) { return; }
    if (BodyIndexMap[id.xy].x == 0.0) { return; }

    //8近傍を見てボロノイ点を見つける
    //3つ
    //float4 centerColor = CellularMap[id.xy];
    int centerSeedPointIndex = round(SeedMap[id.xy].z * MaxPointNum);
    int trianglePoints[TRIANGLE_POINTS_NUM] = {centerSeedPointIndex, -1, -1}; //num of neighbor seedPoints must be three
    int index = 1;

    for (int dy = -1; dy <= 1; dy++) {
        for (int dx = -1; dx <= 1; dx++) {
            int2 vicinityXy = id.xy + float2(dx, dy);
            if (0 <= vicinityXy.x && vicinityXy.x < width &&
                0 <= vicinityXy.y && vicinityXy.y < height)
            {
                int neighborSeedPointIndex = round(SeedMap[vicinityXy].z * MaxPointNum); //0~1 to 0~w, 0~1 to 0~h

                if (neighborSeedPointIndex >= 0) {
                    if (! isIncludedIn(trianglePoints, neighborSeedPointIndex)) {
                        trianglePoints[index] = neighborSeedPointIndex;
                        index++;
                    }
                }

            }
        }
    }

    if (trianglePoints[0] >= 0 && trianglePoints[1] >= 0 && trianglePoints[2] >= 0) {
        wTriangles.Append(int3(trianglePoints[0], trianglePoints[1], trianglePoints[2]));
    }

}