#pragma kernel Unproject
#pragma kernel BakeEdges

Buffer<uint> ColorBuffer;
Buffer<uint> DepthBuffer;
Buffer<uint> BodyIndexBuffer;
Buffer<float> XYTable;
float MaxDepth;
RWTexture2D<float4> ColorMap;
RWTexture2D<float4> PositionMap;
RWTexture2D<float4> BodyIndexMap;
RWTexture2D<float4> DepthMap;

half EdgeSensitivity;
RWTexture2D<float4> EdgeMap;

inline float remap(float x, float in_min, float in_max,
                   float out_min, float out_max) {
    float t = (x - in_min) / (in_max - in_min);
    return lerp(out_min, out_max, t);
}

float3 uint_to_float3(uint raw)
{
    return (uint3(raw >> 16, raw >> 8, raw) & 0xff) / 255.0;
}

uint uint_to_ushort(uint raw, bool high)
{
    uint4 c4 = uint4(raw, raw >> 8, raw >> 16, raw >> 24) & 0xff;
    uint2 c2 = high ? c4.zw : c4.xy;
    return c2.x + (c2.y << 8);
}

[numthreads(8, 8, 1)]
void Unproject(uint2 id : SV_DispatchThreadID)
{
    // Buffer index
    uint idx = (577 - id.y) * 640 + id.x;

    // Color sample
    float3 color = uint_to_float3(ColorBuffer[idx]);

    // Body index map sample
    float bodyIndex = uint_to_ushort(BodyIndexBuffer[idx >> 2], idx & 1); //idx >> 2: 0~3,4~7,8~11.. are a same value on Buffer
    //float3 bodyIndex = uint_to_float3(BodyIndexBuffer[idx >> 2]); //idx >> 2: 0~3,4~7,8~11.. are a same value on Buffer

    // Depth sample (int16 -> float)
    float depth = uint_to_ushort(DepthBuffer[idx >> 1], idx & 1) / 1000.0;

    float mask = depth > 0 && depth < MaxDepth;
    float z = lerp(MaxDepth, depth, mask);

    // XY table lookup
    float2 xy = float2(XYTable[idx * 2], -XYTable[idx * 2 + 1]);

    // Map
    ColorMap[id] = float4(color, mask);
    PositionMap[id] = float4(xy * z, z, mask);

    //bodyIndex >= 255 means the pixel is background.
    //https://microsoft.github.io/Azure-Kinect-Body-Tracking/release/0.9.x/group__btdefinitions.html
    float bodyIndexPixel = bodyIndex >= 255 ? 0.0 : 1.0;
    BodyIndexMap[id] = float4(bodyIndexPixel, bodyIndexPixel, bodyIndexPixel, 1.0);

    float depth_gray = remap(depth, 0.0, MaxDepth, 0.0, 1.0); //Remap (0.0, MaxDepth) -> (0.0, 1.0)
    DepthMap[id] = float4(depth_gray, depth_gray, depth_gray, 1.0);
}

[numthreads(8, 8, 1)]
void BakeEdges(uint2 id : SV_DispatchThreadID)
{
    uint w, h;
    DepthMap.GetDimensions(w, h);

    //
    // Roberts cross operator
    // Refered to: https://github.com/keijiro/KinoContour/blob/master/Assets/Kino/Contour/Shader/Contour.shader
    //
    float2 uv0 = float2(id.xy); //uint2 -> float
    float2 uv1 = uv0 + float2(1, 1);
    float2 uv2 = uv0 + float2(1, 0);
    float2 uv3 = uv0 + float2(0, 1);

    if (uv1.x < w && uv1.y < h) {
        float3 c0 = DepthMap[uv0].rgb;
        float3 c1 = DepthMap[uv1].rgb;
        float3 c2 = DepthMap[uv2].rgb;
        float3 c3 = DepthMap[uv3].rgb;

        float3 cg1 = c1 - c0;
        float3 cg2 = c3 - c2;
        float cg = sqrt(dot(cg1, cg1) + dot(cg2, cg2));
        half edge = cg >= (1.0 - EdgeSensitivity);
        EdgeMap[uv0] = edge;
    }
}